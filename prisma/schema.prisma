// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  exams          Exam[]
  userExamAnswer UserExamAnswer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id           Int              @id @default(autoincrement())
  question     String
  type         QuestionType
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  answers      Answer[]
  exams        Exam[]
  userExam     UserExamAnswer[]
  questionTags QuestionTag[]
}

model Answer {
  id         Int              @id @default(autoincrement())
  answer     String
  isCorrect  Boolean
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  question   Question         @relation(fields: [questionId], references: [id])
  questionId Int
  UserExam   UserExamAnswer[]

  @@index([questionId])
}

model Exam {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  createdBy   User             @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  questions   Question[]
  userExam    UserExamAnswer[]
  examTags    ExamTag[]
}

model UserExamAnswer {
  id         Int      @id @default(autoincrement())
  exam       Exam     @relation(fields: [examId], references: [id])
  examId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answer     Answer   @relation(fields: [answerId], references: [id])
  answerId   Int
  isCorrect  Boolean?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([examId])
  @@index([userId])
  @@index([answerId])
  @@index([questionId])
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  questionTags QuestionTag[]
  examTags     ExamTag[]
}

model QuestionTag {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int

  @@index([questionId])
  @@index([tagId])
}

model ExamTag {
  id     Int  @id @default(autoincrement())
  exam   Exam @relation(fields: [examId], references: [id])
  examId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@index([examId])
  @@index([tagId])
}

enum QuestionType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
  SELETEONE
  SELECTMANY
}
